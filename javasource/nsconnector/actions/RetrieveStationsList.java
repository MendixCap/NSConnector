// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package nsconnector.actions;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import nsconnector.proxies.Namen;
import nsconnector.proxies.Station;
import nsconnector.proxies.Stations;
import nsconnector.proxies.Synoniem;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This connector will retrieve the complete list of all train stations that are available in the NS API. These stations can be used to make further requests like Live Departures or to get travel advice.
 * 
 * As mentioned in the NS API regulations: This call should not be made frequently. Because of it size it is suggested to store the data in your database. Using this call to often can lead to exclusion of the NS API.
 * 
 * Input parameters;
 * 1. API email (Get this by contacting the NS API webpage - see app store documentation)
 * 2. API key (Get this by contacting the NS API webpage - see app store documentation)
 */
public class RetrieveStationsList extends CustomJavaAction<IMendixObject>
{
	private String apiEmail;
	private String apiKey;

	public RetrieveStationsList(IContext context, String apiEmail, String apiKey)
	{
		super(context);
		this.apiEmail = apiEmail;
		this.apiKey = apiKey;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		String urlStr = "http://webservices.ns.nl/ns-api-stations-v2";
		
		try {
			String response = HttpRequest.httpGet(urlStr, this.apiEmail, this.apiKey);
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new ByteArrayInputStream(response.getBytes("UTF-8")));
			doc.getDocumentElement().normalize();
			
			Stations stations = new Stations(super.getContext());
			
			NodeList nList = doc.getElementsByTagName("Station");
			
			for(int i = 0; i < nList.getLength(); i++){
				Node nNode = nList.item(i);
				if(nNode.getNodeType() == Node.ELEMENT_NODE){
					Station station = new Station(super.getContext());
					station.setStation_Stations(stations);
					Element element = (Element)nNode;
					station.setCode(Helpers.getChildElementContent(element, "Code"));
					station.set_Type(Helpers.getChildElementContent(element, "Type"));
					station.setLand(Helpers.getChildElementContent(element, "Land"));
					station.setUICCode(Helpers.getChildElementContent(element, "UICCode"));
					station.setLat(Helpers.getChildElementContent(element, "Lat"));
					station.setLon(Helpers.getChildElementContent(element, "Lon"));
					
					Node nameNode = element.getElementsByTagName("Namen").item(0);
					Element nameElement = (Element)nameNode;
					
					Namen namen = new Namen(super.getContext());
					namen.setNamen_Station(station);
					
					namen.setKort(Helpers.getChildElementContent(nameElement, "Kort"));
					namen.setMiddel(Helpers.getChildElementContent(nameElement, "Middel"));
					namen.setLang(Helpers.getChildElementContent(nameElement, "Lang"));
					
					Element synoniemenElement = (Element)element.getElementsByTagName("Synoniemen").item(0);
					NodeList synoniemen = synoniemenElement.getElementsByTagName("Synoniem");
					
					for(int j = 0; j < synoniemen.getLength(); j++){
						Element synoniemElement = (Element)synoniemen.item(j);
						
						Synoniem synoniem = new Synoniem(super.getContext());
						synoniem.setSynoniem_Station(station);
						synoniem.setNaam(synoniemElement.getTextContent());
						
					}
					
				}
			}
			Core.getLogger("responsebody trainlist").info(response);

			return stations.getMendixObject();
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "RetrieveStationsList";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
