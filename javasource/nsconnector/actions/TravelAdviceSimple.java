// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package nsconnector.actions;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import nsconnector.proxies.*;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import nsconnector.actions.HttpRequest;

/**
 * This connector will retrieve multiple travel advices based on a departure station and arrival station.
 * 
 * Input parameters;
 * 1. Departure Station (Name of a valid station)
 * 2. Arrival Station (Name of a valid station)
 * 3. API email (Get this by contacting the NS API webpage - see app store documentation)
 * 4. API key (Get this by contacting the NS API webpage - see app store documentation)
 * 
 * Output parameters:
 * 1. TravelPlan object( over association you can retrieve the possible options and its association information: ReisDeel, ReisStop).
 */
public class TravelAdviceSimple extends CustomJavaAction<IMendixObject>
{
	private String DepartureStation;
	private String ArrivalStation;
	private String apiEmail;
	private String apiKey;

	public TravelAdviceSimple(IContext context, String DepartureStation, String ArrivalStation, String apiEmail, String apiKey)
	{
		super(context);
		this.DepartureStation = DepartureStation;
		this.ArrivalStation = ArrivalStation;
		this.apiEmail = apiEmail;
		this.apiKey = apiKey;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		
		//Create TrainStatus object and fill with return from callNSApi.
		//Return the object
		TravelPlan trainStatus = new TravelPlan(super.getContext());
		trainStatus = callNSApi(trainStatus, this.DepartureStation, this.ArrivalStation);
		return trainStatus.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "TravelAdviceSimple";
	}

	// BEGIN EXTRA CODE
	
	public TravelPlan callNSApi(TravelPlan responseObject, String dep, String arr) throws ParserConfigurationException, SAXException{		
		//Replace spaces with hyphen to match NS API regulation
		
		if(dep == null || dep.equals("")){
			responseObject.setSuccessful(false);
			responseObject.setResponseMessage("The departure station cannot be empty");
			return responseObject;
		}
		if(arr == null || arr.equals("")){
			responseObject.setSuccessful(false);
			responseObject.setResponseMessage("The arrival station cannot be empty");
			return responseObject;
		}
		
		responseObject.setDepartureStation(this.DepartureStation);
		responseObject.setArrivalStation(this.ArrivalStation);
		
		String replaceDep = dep.replace(' ', '+');
		String replaceArr = arr.replace(' ', '+');
		
		//Build URL for requesting the travel advice
		StringBuilder urlStrb = new StringBuilder("http://webservices.ns.nl/ns-api-treinplanner?");
		urlStrb.append("fromStation=" + replaceDep);
		urlStrb.append("&toStation=" + replaceArr);
				
		//TODO: documentation
		try {
			
			String httpResult = HttpRequest.httpGet(urlStrb.toString(), this.apiEmail, this.apiKey);
		
			//TODO: try-catch en in apparte method
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new ByteArrayInputStream(httpResult.getBytes("UTF-8")));
			doc.getDocumentElement().normalize();
			//TODO: documentation	
			
			NodeList eList = doc.getElementsByTagName("error");
			//Check if there is an error
			if(eList.getLength() > 0){
				Node eNode = eList.item(0);
				Element errorElement = (Element)eNode;
				responseObject.setSuccessful(false);
				String errorMessage = Helpers.getChildElementContent(errorElement, "message");
				
				if(errorMessage.equals("Geen geldige 'fromStation' opgegeven")){
					errorMessage = "The departure station provided is not valid";
				} else if(errorMessage.equals("Geen geldige 'toStation' opgegeven")){
					errorMessage = "The arrival station provided is not valid";
				}
				
				responseObject.setResponseMessage(errorMessage);
				
				return responseObject;
			}
			
			NodeList nList = doc.getElementsByTagName("ReisMogelijkheid");
			
			for(int t = 0; t < nList.getLength(); t++){
				Node nNode = nList.item(t);
				if(nNode.getNodeType() == Node.ELEMENT_NODE){
					Element eElement = (Element)nNode;					
					ReisMogelijkheid reisMogelijkheid = new nsconnector.proxies.ReisMogelijkheid(super.getContext()); 
					//Set all attributes of the element
					reisMogelijkheid.setAantalOverstappen(Integer.parseInt(Helpers.getChildElementContent(eElement, "AantalOverstappen")));
					reisMogelijkheid.setGeplandeReisTijd(Helpers.getChildElementContent(eElement, "GeplandeReisTijd"));
					reisMogelijkheid.setActueleReisTijd(Helpers.getChildElementContent(eElement, "ActueleReisTijd"));
					reisMogelijkheid.setGeplandeVertrekTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(eElement, "GeplandeVertrekTijd")));
					reisMogelijkheid.setActueleVertrekTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(eElement, "ActueleVertrekTijd")));
					reisMogelijkheid.setGeplandeAankomstTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(eElement, "GeplandeAankomstTijd")));
					reisMogelijkheid.setActueleAankomstTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(eElement, "ActueleAankomstTijd")));
					reisMogelijkheid.setStatus(Helpers.getChildElementContent(eElement, "Status"));
					//Set association to parent entity (TrainStatus)
					reisMogelijkheid.setReisMogelijkheid_TrainStatus(responseObject);

					//Get ReisDeel objects from the ReisMogelijkheid
					NodeList reisDelen = eElement.getElementsByTagName("ReisDeel");
					for(int j = 0; j < reisDelen.getLength(); j++){
						Node rNode = reisDelen.item(j);
						if(rNode.getNodeType() == Node.ELEMENT_NODE){
							Element rElement = (Element)rNode;
							ReisDeel reisDeel = new ReisDeel(super.getContext());
							reisDeel.setVervoerder(Helpers.getChildElementContent(rElement, "Vervoerder"));
							reisDeel.setVervoerType(Helpers.getChildElementContent(rElement, "VervoerType"));
							reisDeel.setStatus(Helpers.getChildElementContent(rElement, "Status"));
							reisDeel.setReisDeel_ReisMogelijkheid(reisMogelijkheid);
							
							//Get ReisStop from reisdeel
							NodeList reisStops = rElement.getElementsByTagName("ReisStop");
							for(int x = 0; x < reisStops.getLength(); x++){	
								Node xNode = reisStops.item(x);
								if(xNode.getNodeType() == Node.ELEMENT_NODE){
									Element xElement = (Element)xNode;
									ReisStop reisStop = new ReisStop(super.getContext());
									reisStop.setNaam(Helpers.getChildElementContent(xElement, "Naam"));
									reisStop.setSpoor(Helpers.getChildElementContent(xElement, "Spoor"));
									reisStop.setTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(xElement, "Tijd")));
									reisStop.setReisStop_ReisDeel(reisDeel);
									
								}
							}
						}						
					}	
				}
			}
			
		} catch (IOException e) {
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
						
			Core.getLogger("callNSApi").error("StackTrace: " + sw.toString());
		}
				
		return responseObject;
	}
	

	//TODO: create logging function to keep methods private
	
	// END EXTRA CODE
}
