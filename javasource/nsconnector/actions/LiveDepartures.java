// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package nsconnector.actions;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import nsconnector.proxies.Departures;
import nsconnector.proxies.VertrekkendeTrein;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This connector will retrieve the live train departures of a train station.
 * 
 * Input parameters;
 * 1. Station (Valid name of a station available in the NS API)
 * 2. API email (Get this by contacting the NS API webpage - see app store documentation)
 * 3. API key (Get this by contacting the NS API webpage - see app store documentation)
 * 
 * Output is: 
 * 1. Departures object. (Over association you can retrieve the objects: VertrekkendeTrein (departing train)).
 */
public class LiveDepartures extends CustomJavaAction<IMendixObject>
{
	private String StationParameter1;
	private String apiEmail;
	private String apiKey;

	public LiveDepartures(IContext context, String StationParameter1, String apiEmail, String apiKey)
	{
		super(context);
		this.StationParameter1 = StationParameter1;
		this.apiEmail = apiEmail;
		this.apiKey = apiKey;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		Departures responseObject = new Departures(super.getContext());
		
		responseObject = callNSApi(responseObject, this.StationParameter1);
		
		return responseObject.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "LiveDepartures";
	}

	// BEGIN EXTRA CODE
	
	private Departures callNSApi(Departures departures, String trainStation) throws ParserConfigurationException, SAXException{
		
		//Check if the train station is empty or null
		//If so, the request cannot be done, so set the error properties and return the object
		if(trainStation == null || trainStation.equals("")){
			departures.setSuccessful(false);
			departures.setResponseMessage("The train station cannot be empty");
			return departures;
		}
		String replaceTrainStation = trainStation.replace(' ', '+');
		
		//Build URL for requesting the live departures
		StringBuilder urlStrb = new StringBuilder("http://webservices.ns.nl/ns-api-avt?");
		urlStrb.append("station=" + replaceTrainStation);	
		
		try{
			
			String httpResult = HttpRequest.httpGet(urlStrb.toString(), this.apiEmail, this.apiKey);
			
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(new ByteArrayInputStream(httpResult.getBytes("UTF-8")));
			doc.getDocumentElement().normalize();
			
			NodeList eList = doc.getElementsByTagName("error");
			//Check if there is an error
			if(eList.getLength() > 0){
				Node eNode = eList.item(0);
				Element errorElement = (Element)eNode;
				departures.setSuccessful(false);
				String errorMessage = Helpers.getChildElementContent(errorElement, "message");
				
				if(errorMessage.equals("Geen geldige 'fromStation' opgegeven")){
					errorMessage = "The departure station provided is not valid";
				} else if(errorMessage.equals("Geen geldige 'toStation' opgegeven")){
					errorMessage = "The arrival station provided is not valid";
				}
				
				departures.setResponseMessage(errorMessage);
				
				return departures;
			}
			
			//Get the list of VertrekenendeTreinenen elements from the XML doc
			NodeList nList = doc.getElementsByTagName("VertrekkendeTrein");
			for(int t = 0; t < nList.getLength(); t++){
				Node nNode = nList.item(t);
				if(nNode.getNodeType() == Node.ELEMENT_NODE){
					Element eElement = (Element)nNode;					
					VertrekkendeTrein vertrekkendeTrein = new VertrekkendeTrein(super.getContext());
					
					//set values
					vertrekkendeTrein.setRitnummer(Integer.parseInt(Helpers.getChildElementContent(eElement, "RitNummer")));
					vertrekkendeTrein.setVertrekTijd(Helpers.convertStringToDate(Helpers.getChildElementContent(eElement, "VertrekTijd")));
					vertrekkendeTrein.setEindBestemming(Helpers.getChildElementContent(eElement, "EindBestemming"));
					vertrekkendeTrein.setTreinSoort(Helpers.getChildElementContent(eElement, "TreinSoort"));
					vertrekkendeTrein.setRouteTekst(Helpers.getChildElementContent(eElement, "RouteTekst"));
					vertrekkendeTrein.setVervoerder(Helpers.getChildElementContent(eElement, "Vervoerder"));
					vertrekkendeTrein.setVertrekSpoor(Helpers.getChildElementContent(eElement, "VertrekSpoor"));
					//set association to departures
					vertrekkendeTrein.setVertrekkendeTrein_Departures(departures);
					
				}
			}
				
			
			
		}catch(IOException e){
			
			StringWriter sw = new StringWriter();
			PrintWriter pw = new PrintWriter(sw);
			e.printStackTrace(pw);
						
			Core.getLogger("callNSApi").error("StackTrace: " + sw.toString());
		}
		
		return departures;
	}
	
	// END EXTRA CODE
}
